/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	controllerv1 "guille.cloud/kubernetes-custom-resource/pkg/apis/controller/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeYDatas implements YDataInterface
type FakeYDatas struct {
	Fake *FakeGithubV1
	ns   string
}

var ydatasResource = schema.GroupVersionResource{Group: "guille.cloud/kubernetes-custom-resource", Version: "v1", Resource: "ydatas"}

var ydatasKind = schema.GroupVersionKind{Group: "guille.cloud/kubernetes-custom-resource", Version: "v1", Kind: "YData"}

// Get takes name of the yData, and returns the corresponding yData object, and an error if there is any.
func (c *FakeYDatas) Get(ctx context.Context, name string, options v1.GetOptions) (result *controllerv1.YData, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(ydatasResource, c.ns, name), &controllerv1.YData{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.YData), err
}

// List takes label and field selectors, and returns the list of YDatas that match those selectors.
func (c *FakeYDatas) List(ctx context.Context, opts v1.ListOptions) (result *controllerv1.YDataList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(ydatasResource, ydatasKind, c.ns, opts), &controllerv1.YDataList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &controllerv1.YDataList{ListMeta: obj.(*controllerv1.YDataList).ListMeta}
	for _, item := range obj.(*controllerv1.YDataList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested yDatas.
func (c *FakeYDatas) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(ydatasResource, c.ns, opts))

}

// Create takes the representation of a yData and creates it.  Returns the server's representation of the yData, and an error, if there is any.
func (c *FakeYDatas) Create(ctx context.Context, yData *controllerv1.YData, opts v1.CreateOptions) (result *controllerv1.YData, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(ydatasResource, c.ns, yData), &controllerv1.YData{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.YData), err
}

// Update takes the representation of a yData and updates it. Returns the server's representation of the yData, and an error, if there is any.
func (c *FakeYDatas) Update(ctx context.Context, yData *controllerv1.YData, opts v1.UpdateOptions) (result *controllerv1.YData, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(ydatasResource, c.ns, yData), &controllerv1.YData{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.YData), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeYDatas) UpdateStatus(ctx context.Context, yData *controllerv1.YData, opts v1.UpdateOptions) (*controllerv1.YData, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(ydatasResource, "status", c.ns, yData), &controllerv1.YData{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.YData), err
}

// Delete takes name of the yData and deletes it. Returns an error if one occurs.
func (c *FakeYDatas) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(ydatasResource, c.ns, name), &controllerv1.YData{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeYDatas) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(ydatasResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &controllerv1.YDataList{})
	return err
}

// Patch applies the patch and returns the patched yData.
func (c *FakeYDatas) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *controllerv1.YData, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(ydatasResource, c.ns, name, pt, data, subresources...), &controllerv1.YData{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.YData), err
}
